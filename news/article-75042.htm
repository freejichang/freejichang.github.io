<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freejichang.github.io/news/article-75042.htm" />
    <meta charset="utf-8">
    <title>基于JDK的动态代理原理分析</title>
        <meta name="description" content="基于JDK的动态代理原理分析 这篇文章解决三个问题：   What 动态代理是什么   How 动态代理怎么用   Why 动态代理的原理   动态代理是什么？ 动态代理是代理模式的一种具体实现，是指" />
        <link rel="icon" href="/assets/website/img/winxraygithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="免费机场 订阅链接中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freejichang.github.io/news/article-75042.htm" />
    <meta property="og:site_name" content="免费机场 订阅链接中文网" />
    <meta property="og:title" content="基于JDK的动态代理原理分析" />
    <meta property="og:image" content="https://freejichang.github.io/uploads/20240803/7a0a805eb75448c0d36f33cb6b68640e.webp" />
        <meta property="og:release_date" content="2025-03-16T10:29:50" />
    <meta property="og:updated_time" content="2025-03-16T10:29:50" />
        <meta property="og:description" content="基于JDK的动态代理原理分析 这篇文章解决三个问题：   What 动态代理是什么   How 动态代理怎么用   Why 动态代理的原理   动态代理是什么？ 动态代理是代理模式的一种具体实现，是指" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="基于JDK的动态代理原理分析">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,700" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/winxraygithub/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/jquery-ui.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/jquery.fancybox.min.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/bootstrap-datepicker.css">
    <link rel="stylesheet" href="/assets/website/fonts/winxraygithub/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/aos.css">
    <link rel="stylesheet" href="/assets/website/css/winxraygithub/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JC1DVVVL2Y"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JC1DVVVL2Y');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div id="overlayer"></div>
    <div class="loader">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div class="site-wrap" id="home-section">
                <div class="site-mobile-menu site-navbar-target">
            <div class="site-mobile-menu-header">
                <div class="site-mobile-menu-close mt-3">
                    <span class="icon-close2 js-menu-toggle"></span>
                </div>
            </div>
            <div class="site-mobile-menu-body"></div>
        </div>
        <header class="site-navbar py-4 js-sticky-header site-navbar-target" role="banner">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-6 col-md-3 col-xl-4  d-block">
                        <a href="/" class="text-black h2 mb-0">
                                                免费机场                        </a>
                    </div>
                    <div class="col-12 col-md-9 col-xl-8 main-menu">
                        <nav class="site-navigation position-relative text-right" role="navigation">
                            <ul class="site-menu main-menu js-clone-nav mr-auto d-none d-lg-block ml-0 pl-0">
                                                                <li><a href="/" class="nav-link">首页</a></li>
                                                                <li><a href="/free-nodes/" class="nav-link">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/" class="nav-link">推荐机场</a></li>
                                                                <li><a href="/client.htm" class="nav-link">客户端</a></li>
                                                                <li><a href="/news/" class="nav-link">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                    <div class="col-6 col-md-9 d-inline-block d-lg-none ml-md-0"><a href="#" class="site-menu-toggle js-menu-toggle text-black float-right"><span class="icon-menu h3"></span></a></div>
                </div>
            </div>
        </header>

        <div class="site-blocks-cover list" style="overflow: hidden;">
            <div class="container">
                <div class="row align-items-center justify-content-center">
                    <div class="col-md-12" style="position: relative;" data-aos="fade-up" data-aos-delay="200">
                        <img src="/assets/website/img/winxraygithub/undraw_investing_7u74.svg" alt="Image" class="img-fluid img-absolute">
                        <div class="row" data-aos="fade-up" data-aos-delay="200">
                            <div class="col-lg-6 mr-auto">
                                <h1>基于JDK的动态代理原理分析</h1>
                                <p class="mb-5">
                                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="feature-big my-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<h2 class="md-end-block md-heading"><span class="md-plain md-expand">基于JDK的动态代理原理分析</span></h2> <p class="md-end-block md-p"><span class="md-plain">这篇文章解决三个问题：</span></p> <ol class="ol-list" start=""> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>What</strong><span class="md-plain"> 动态代理是什么</span></span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>How</strong><span class="md-plain"> 动态代理怎么用</span></span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>Why</strong><span class="md-plain"> 动态代理的原理</span></span></p> </li> </ol> <p class="md-end-block md-p md-focus"><span class="md-pair-s md-expand"><strong>动态代理是什么？</strong></span></p> <p class="md-end-block md-p"><span class="md-plain">动态代理是代理模式的一种具体实现，是指在程序运行期间，动态的生成目标对象的代理类（直接加载在内存中的字节码文件），实现对目标对象所有方法的增强。通过这种方式，我们可以在不改变（或无法改变）目标对象源码的情况下，对目标对象的方法执行前后进行干预。</span></p> <p class="md-end-block md-p"><span class="md-pair-s"><strong>动态代理怎么用？</strong></span></p> <p class="md-end-block md-p"><span class="md-plain">首先，准备好我们需要代理的类和接口，<span class="md-pair-s"><strong>因为JDK的动态代理是基于接口实现的，所以被代理的对象必须要有接口</strong><span class="md-plain">。</span></span></span></p> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* SaySomething接口<br/><span><span class="cm-comment">*/<br/><span><span class="cm-keyword">public<span class="cm-keyword">interface<span class="cm-def">SaySomething {<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayHello();<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayBye();<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* SaySomething的实现类<br/><span><span class="cm-comment">*/<br/><span><span class="cm-keyword">public<span class="cm-keyword">class<span class="cm-def">SaySomethingImpl<span class="cm-keyword">implements<span class="cm-variable">SaySomething {<br/><span><span class="cm-meta">@Override<br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayHello() {<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"Hello World");<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-meta">@Override<br/><span><span class="cm-keyword">public<span class="cm-variable-3">void<span class="cm-variable">sayBye() {<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"Bye Bye");<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><span class="md-plain">按照动态代理的用法，需要自定义一个处理器，用来编写自定义逻辑，实现对被代理对象的增强。</span></p> <p class="md-end-block md-p"><span class="md-plain">自定义的处理器需要满足以下要求：</span></p> <ul class="ul-list" data-mark="+"> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-plain">需要实现InvocationHandler，重写invoke方法，在invoke方法中通过加入自定义逻辑，实现对目标对象的增强。</span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-plain">需要持有一个成员变量，成员变量的是被代理对象的实例，通过构造参数传入。（用来支持反射调用被代理对象的方法）</span></p> </li> <li class="md-list-item"> <p class="md-end-block md-p"><span class="md-plain">需要提供一个参数为被代理对象接口类的有参构造。（用来支持反射调用被代理对象的方法）</span></p> </li> </ul> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* 自定义的处理器，用来编写自定义逻辑，实现对被代理对象的增强<br/><span><span class="cm-comment">*/<br/><span><span class="cm-keyword">public<span class="cm-keyword">class<span class="cm-def">CustomHandler<span class="cm-keyword">implements<span class="cm-variable">InvocationHandler {<br/><span><span><br/><span><span class="cm-comment">//需要有一个成员变量，成员变量为被代理对象，通过构造参数传入，用来支持方法的反射调用。<br/><span><span class="cm-keyword">private<span class="cm-variable">SaySomething<span class="cm-variable">obj;<br/><span><br/><span><span class="cm-comment">//需要有一个有参构造，通过构造函数将被代理对象的实例传入，用来支持方法的反射调用<br/><span><span class="cm-keyword">public<span class="cm-variable">CustomHandler(<span class="cm-variable">SaySomething<span class="cm-variable">obj) {<br/><span><span class="cm-keyword">this.<span class="cm-variable">obj<span class="cm-operator">=<span class="cm-variable">obj;<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-comment">/**<br/><span><span class="cm-comment">* proxy:动态生成的代理类对象com.sun.proxy.$Proxy0<br/><span><span class="cm-comment">* method:被代理对象的真实的方法的Method对象<br/><span><span class="cm-comment">* args:调用方法时的入参<br/><span><span class="cm-comment">*/<br/><span><span class="cm-meta">@Override<br/><span><span class="cm-keyword">public<span class="cm-variable-3">Object<span class="cm-variable">invoke(<span class="cm-variable-3">Object<span class="cm-variable">proxy,<span class="cm-variable">Method<span class="cm-variable">method,<span class="cm-variable-3">Object[]<span class="cm-variable">args)<span class="cm-keyword">throws<span class="cm-variable">Throwable {<br/><span><span class="cm-comment">//目标方法执行前的自定义逻辑处理<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"-----before------");<br/><span><span><br/><span><span class="cm-comment">//执行目标对象的方法，使用反射来执行方法，反射需要传入目标对象，此时用到了成员变量obj。<br/><span><span class="cm-variable-3">Object<span class="cm-variable">result<span class="cm-operator">=<span class="cm-variable">method.<span class="cm-variable">invoke(<span class="cm-variable">obj,<span class="cm-variable">args);<br/><span><span><br/><span><span class="cm-comment">//目标方法执行后的自定义逻辑处理<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"-----after------");<br/><span><span class="cm-keyword">return<span class="cm-variable">result;<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><span class="md-plain">这样我们就完成了自定义处理器的编写，同时在invoke方法中实现对了代理对象方法的增强，被代理类的所有方法的执行都会执行我们自定义的逻辑。</span></p> <p class="md-end-block md-p"><span class="md-plain">接下来，需要通过Proxy,newProxyInstance()方法来生成代理对象的实例，并进行方法调用测试。</span></p> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-keyword">public<span class="cm-keyword">class<span class="cm-def">JdkProxyTest {<br/><span><span class="cm-keyword">public<span class="cm-keyword">static<span class="cm-variable-3">void<span class="cm-variable">main(<span class="cm-variable-3">String[]<span class="cm-variable">args) {<br/><span><span class="cm-comment">//将生成的代理对象的字节码文件 保存到硬盘<br/><span><span class="cm-variable">System.<span class="cm-variable">getProperties().<span class="cm-variable">setProperty(<span class="cm-string">"sun.misc.ProxyGenerator.saveGeneratedFiles",<span class="cm-string">"true");<br/><span><span><br/><span><span class="cm-comment">//被代理对象的实例<br/><span><span class="cm-variable">SaySomething<span class="cm-variable">obj<span class="cm-operator">=<span class="cm-keyword">new<span class="cm-variable">SaySomethingImpl();<br/><span><span class="cm-comment">//通过构造函数,传入被代理对象的实例，生成处理器的实例<br/><span><span class="cm-variable">InvocationHandler<span class="cm-variable">handler<span class="cm-operator">=<span class="cm-keyword">new<span class="cm-variable">CustomHandler(<span class="cm-variable">obj);<br/><span><span class="cm-comment">//通过Proxy.newProxyInstance方法，传入被代理对象Class对象、处理器实例，生成代理对象实例<br/><span><span class="cm-variable">SaySomething<span class="cm-variable">proxyInstance<span class="cm-operator">= (<span class="cm-variable">SaySomething)<span class="cm-variable">Proxy.<span class="cm-variable">newProxyInstance(<span class="cm-variable">obj.<span class="cm-variable">getClass().<span class="cm-variable">getClassLoader(),<br/><span><span class="cm-keyword">new<span class="cm-variable">Class[]{<span class="cm-variable">SaySomething.<span class="cm-keyword">class},<span class="cm-variable">handler);<br/><span><span class="cm-comment">//调用生成的代理对象的sayHello方法<br/><span><span class="cm-variable">proxyInstance.<span class="cm-variable">sayHello();<br/><span><span class="cm-variable">System.<span class="cm-variable">out.<span class="cm-variable">println(<span class="cm-string">"===================分割线==================");<br/><span><span class="cm-comment">//调用生成的代理对象的sayBye方法<br/><span><span class="cm-variable">proxyInstance.<span class="cm-variable">sayBye();<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0fb0628d25073bc101dd21a1f30836be.jpg" alt="基于JDK的动态代理原理分析"></p> <p><span class="md-plain">运行main方法，查看控制台，大功告成。至此，我们已经完整的完成了一次动态代理的使用。</span></p> <p class="md-end-block md-p"> <p class="md-end-block md-p"><span class="md-pair-s"><strong>动态代理的原理</strong></span></p> <p class="md-end-block md-p"><span class="md-plain">生成的proxyInstance对象到底是什么，为什么调用它的sayHello方法会执行CustomerHandler的invoke方法呢？</span></p> <p class="md-end-block md-p"><span class="md-plain">直接贴上proxyInstance的字节码文件，我们就会恍然大悟了...</span></p> <pre class="md-fences md-end-block ty-contain-cm modeLoaded"><span><span class="cm-comment">//$Proxy0是SaySomething的实现类，重写了sayHello和sayBye方法<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-keyword">class<span class="cm-def">$Proxy0<span class="cm-keyword">extends<span class="cm-variable">Proxy<span class="cm-keyword">implements<span class="cm-variable">SaySomething {<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m1;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m3;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m2;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m4;<br/><span><span class="cm-keyword">private<span class="cm-keyword">static<span class="cm-variable">Method<span class="cm-variable">m0;<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-variable">$Proxy0(<span class="cm-variable">InvocationHandler<span class="cm-variable">var1)<span class="cm-keyword">throws  {<br/><span><span class="cm-keyword">super(<span class="cm-variable">var1);<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-keyword">static {<br/><span><span class="cm-keyword">try {<br/><span><span class="cm-variable">m1<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object").<span class="cm-variable">getMethod(<span class="cm-string">"equals",<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object"));<br/><span><span class="cm-variable">m3<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"com.example.demo.hanmc.proxy.jdk.SaySomething").<span class="cm-variable">getMethod(<span class="cm-string">"sayHello");<br/><span><span class="cm-variable">m2<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object").<span class="cm-variable">getMethod(<span class="cm-string">"toString");<br/><span><span class="cm-variable">m4<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"com.example.demo.hanmc.proxy.jdk.SaySomething").<span class="cm-variable">getMethod(<span class="cm-string">"sayBye");<br/><span><span class="cm-variable">m0<span class="cm-operator">=<span class="cm-variable">Class.<span class="cm-variable">forName(<span class="cm-string">"java.lang.Object").<span class="cm-variable">getMethod(<span class="cm-string">"hashCode");<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">NoSuchMethodException<span class="cm-variable">var2) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">NoSuchMethodError(<span class="cm-variable">var2.<span class="cm-variable">getMessage());<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">ClassNotFoundException<span class="cm-variable">var3) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">NoClassDefFoundError(<span class="cm-variable">var3.<span class="cm-variable">getMessage());<br/><span> &nbsp; &nbsp; &nbsp;  }<br/><span> &nbsp;  }<br/><span><br/><span><span class="cm-comment">//实现了接口的sayHello方法，在方法内部调用了CustomerHandler的invoke方法，同时传入了Method对象，<br/><span><span class="cm-comment">//所以在CustomerHandler对象中可以通过mathod.invovke方法调用SyaSomthing的sayHello方法<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">void<span class="cm-variable">sayHello()<span class="cm-keyword">throws  {<br/><span><span class="cm-keyword">try {<br/><span><span class="cm-comment">//h是父类Proxy中的InvocationHandler对象，其实就是我们自定义的CustomHandler对象<br/><span><span class="cm-keyword">super.<span class="cm-variable">h.<span class="cm-variable">invoke(<span class="cm-keyword">this,<span class="cm-variable">m3, (<span class="cm-variable-3">Object[])<span class="cm-atom">null);<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">RuntimeException<span class="cm-operator">|<span class="cm-variable">Error<span class="cm-variable">var2) {<br/><span><span class="cm-keyword">throw<span class="cm-variable">var2;<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">Throwable<span class="cm-variable">var3) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">UndeclaredThrowableException(<span class="cm-variable">var3);<br/><span> &nbsp; &nbsp; &nbsp;  }<br/><span> &nbsp;  }<br/><span><span><br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">void<span class="cm-variable">sayBye()<span class="cm-keyword">throws  {<br/><span><span class="cm-keyword">try {<br/><span><span class="cm-keyword">super.<span class="cm-variable">h.<span class="cm-variable">invoke(<span class="cm-keyword">this,<span class="cm-variable">m4, (<span class="cm-variable-3">Object[])<span class="cm-atom">null);<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">RuntimeException<span class="cm-operator">|<span class="cm-variable">Error<span class="cm-variable">var2) {<br/><span><span class="cm-keyword">throw<span class="cm-variable">var2;<br/><span> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">catch (<span class="cm-variable">Throwable<span class="cm-variable">var3) {<br/><span><span class="cm-keyword">throw<span class="cm-keyword">new<span class="cm-variable">UndeclaredThrowableException(<span class="cm-variable">var3);<br/><span> &nbsp; &nbsp; &nbsp;  }<br/><span> &nbsp;  }<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">int<span class="cm-variable">hashCode()<span class="cm-keyword">throws  {<br/><span><span class="cm-comment">//忽略内容<br/><span> &nbsp;  }<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">boolean<span class="cm-variable">equals(<span class="cm-variable-3">Object<span class="cm-variable">var1)<span class="cm-keyword">throws  {<br/><span><span class="cm-comment">//忽略内容<br/><span> &nbsp;  }<br/><span><span class="cm-keyword">public<span class="cm-keyword">final<span class="cm-variable-3">String<span class="cm-variable">toString()<span class="cm-keyword">throws  {<br/><span><span class="cm-comment">//忽略内容<br/><span> &nbsp;  }<br/><span>}</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre> <p class="md-end-block md-p"><span class="md-plain">看到了生成的代理对象的字节码文件，是不是一切都明白你了，原理竟然如此简单^_^</span></p> <p class="md-end-block md-p"> <p class="md-end-block md-p"><span class="md-pair-s md-expand"><em>本文为个人学习整理，如有描述错误或者对相关内容感兴趣，欢迎评论或私信交流，一起讨论、共同进步。</em></span></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-74363.htm">动物疫苗证明哪里开的 动物疫苗证明哪里开的啊</a></p>
                                        <p>下一个：<a href="/news/article-75043.htm">Envoy熔断限流实践基于Rainbond插件实现熔断</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-52836.htm" title="宠爱国际动物医疗中心地址（宠爱国际动物医院地址）">宠爱国际动物医疗中心地址（宠爱国际动物医院地址）</a></li>
                        <li class="py-2"><a href="/news/article-69731.htm" title="添组词是什么有哪些(添组词和读音是什么)">添组词是什么有哪些(添组词和读音是什么)</a></li>
                        <li class="py-2"><a href="/news/article-67154.htm" title="宠物粮食品牌排名前十有哪些品种（宠物粮厂家）">宠物粮食品牌排名前十有哪些品种（宠物粮厂家）</a></li>
                        <li class="py-2"><a href="/news/article-54829.htm" title="济南宠物领养微信群 济南宠物领养微信群号">济南宠物领养微信群 济南宠物领养微信群号</a></li>
                        <li class="py-2"><a href="/news/article-61037.htm" title="宠物医生资格证报名（宠物医师资格证报名网站）">宠物医生资格证报名（宠物医师资格证报名网站）</a></li>
                        <li class="py-2"><a href="/news/article-58179.htm" title="动物疫苗的制备流程（动物疫苗的生产工艺流程）">动物疫苗的制备流程（动物疫苗的生产工艺流程）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-16-free-high-speed-nodes.htm" title="免费机场 | 2月16日18.7M/S|免费VPN/SSR/Shadowrocket/V2ray/Clash免费节点链接地址">免费机场 | 2月16日18.7M/S|免费VPN/SSR/Shadowrocket/V2ray/Clash免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-54828.htm" title="动物医生证好考吗（动物医师证报考条件）">动物医生证好考吗（动物医师证报考条件）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-9-node-share-links.htm" title="免费机场 | 3月9日22.3M/S|免费VPN/Clash/Shadowrocket/V2ray/SSR免费节点链接地址">免费机场 | 3月9日22.3M/S|免费VPN/Clash/Shadowrocket/V2ray/SSR免费节点链接地址</a></li>
                        <li class="py-2"><a href="/news/article-69076.htm" title="宠物领养协议书范本模板图片下载 宠物领养协议书范本模板图片下载大全">宠物领养协议书范本模板图片下载 宠物领养协议书范本模板图片下载大全</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">48</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">67</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
                <div class="footer py-5 text-center">
            <div class="container">
                <div class="row mb-5">
                    <div class="col-12">
                        <p class="mb-0">
                            <a href="#" class="p-3"><span class="icon-facebook"></span></a>
                            <a href="#" class="p-3"><span class="icon-twitter"></span></a>
                            <a href="#" class="p-3"><span class="icon-instagram"></span></a>
                            <a href="#" class="p-3"><span class="icon-linkedin"></span></a>
                            <a href="#" class="p-3"><span class="icon-pinterest"></span></a>
                        </p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                        <p class="mb-0">
                        免费机场 订阅链接中文网 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <script src="/assets/website/js/frontend/winxraygithub/jquery-3.3.1.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/jquery-ui.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/popper.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/owl.carousel.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/jquery.countdown.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/bootstrap-datepicker.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/jquery.easing.1.3.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/aos.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/jquery.fancybox.min.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/jquery.sticky.js"></script>
        <script src="/assets/website/js/frontend/winxraygithub/main.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </div> <!-- .site-wrap -->
</body>

</html>